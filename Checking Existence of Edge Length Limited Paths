class DSU {
private:
    vector<int> parent, rank;
public:
    DSU(int n) {
        parent.resize(n);
        rank.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 1;
        }
    }
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    void merge(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) return;
        if (rank[px] < rank[py]) swap(px, py);
        parent[py] = px;
        rank[px] += rank[py];
    }
    bool same(int x, int y) {
        return find(x) == find(y);
    }
};

class Solution {
public:
    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edgeList, vector<vector<int>>& queries) {
        vector<int> qid(queries.size());
        vector<bool> ans(queries.size());
        for (int i = 0; i < qid.size(); i++) {
            qid[i] = i;
        }
        sort(qid.begin(), qid.end(), [&](int i, int j) {
            return queries[i][2] < queries[j][2];
        });
        sort(edgeList.begin(), edgeList.end(), [&](vector<int>& a, vector<int>& b) {
            return a[2] < b[2];
        });
        int idx = 0;
        DSU dsu(n);
        for (int i : qid) {
            int p = queries[i][0], q = queries[i][1], limit = queries[i][2];
            while (idx < edgeList.size() && edgeList[idx][2] < limit) {
                dsu.merge(edgeList[idx][0], edgeList[idx][1]);
                idx++;
            }
            ans[i] = dsu.same(p, q);
        }
        return ans;
    }
};
